"Word / Symbol","Name","What it does"
"puts",,"prints to screen, followed by a carriage return"
"#","octothorpe","comments out a line or part of a line"
"+","plus","adds numbers, concatenates strings"
"-","minus","subtracts numbers"
"/","slash","divides numbers"
"*","asterisk","multiplies numbers, repeats action (*x) x times"
"%","percent","designates string (%s) or numberical (%d) input, designates variables to replace %d or %s, calculates remainder of number"
"<","less than","returns true if value on left is less than value on right"
"> ","greater than","returns true if value on left is greater than value on right"
"<=","less than equal","returns true if value on left is less than or equal value on right"
">=","greater than equal","returns true if value on left is greater than or equal value on right"
"variable",,"a name for something so you can use the name rather than the something as you code"
"_","underscore ","used to put an imaginary space in variable names"
"floating point number",,"a number with a decimal point"
"=","equals","compares two things, loads a variable"
"“”","double quotes","used to make a format string"
"[]","square brackets","used to list variables"
"()","parentheses",
"'","single quotes","used to make a format string"
"#{}","octothorpe, braces","used to inject variables into strings via “string interpolation”"
"print",,"prints to screen"
"\n","backslash n","inserts carriage return"
"<<SOMETHING",,"treats the following text as a multi-line string, end with SOMETHING by itself on a line"
"\ ","backslash  ","escape sequence used to put difficult-to-type characters into a string"
"\t","backslash  t","inserts tab"
"\v","backslash v","inserts vertical tab"
"gets",,"gets input from keyboard"
"chomp()",,"truncates keyboard input (e.g., enter)"
"require",,"Require runs another file, tracks what you've required in the past and won't require the same file twice."
"open",,"opens a file"
"do",,
"include",,"Include takes all the methods from another module and includes them in the current module.  Include is language-level, while Require is file-level."
"library",,"pre-written bits of code "
"ARGV","argument variable","variable assigned when script is run (ruby ex13.rb first 2nd 3rd)"
"$0",,"holds the script (program) name"
"STDIN",,"gets input from keyboard"
"File.open",,"opens a file"
".","dot",
"close",,"closes a file"
"read",,"reads the contents of a file"
"readline",,"reads just one line of a text file"
"truncate",,"empties the file"
"write(stuff)",,"writes stuff to the file"
"File.exists",,"returns true if a file exists"
"cat",,"concatenates files together"
".length",,"returns file length"
"def",,"defines a function"
"*args",,"like ARGV parameter, but for functions"
".seek",,"goes to specified point in file"
"SEEK_SET",,"specifies a point in file absolutely"
